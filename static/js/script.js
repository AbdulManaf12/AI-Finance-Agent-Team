// Mobile Navigation
const hamburger = document.querySelector(".hamburger");
const navMenu = document.querySelector(".nav-menu");

hamburger.addEventListener("click", () => {
  hamburger.classList.toggle("active");
  navMenu.classList.toggle("active");
});

// Close mobile menu when clicking on a link
document.querySelectorAll(".nav-menu a").forEach((link) => {
  link.addEventListener("click", () => {
    hamburger.classList.remove("active");
    navMenu.classList.remove("active");
  });
});

// Smooth scrolling functions
function scrollToDemo() {
  document.getElementById("demo").scrollIntoView({ behavior: "smooth" });
}

function scrollToFeatures() {
  document.getElementById("features").scrollIntoView({ behavior: "smooth" });
}

// Fill input with example query
function fillInput(query) {
  document.getElementById("stockInput").value = query;
  document.getElementById("stockInput").focus();
}

// Analyze stock using Flask backend
async function analyzeStock() {
  const input = document.getElementById("stockInput").value.trim();

  if (!input) {
    alert("Please enter a stock symbol or query");
    return;
  }

  const loadingSpinner = document.getElementById("loadingSpinner");
  const resultsContent = document.getElementById("resultsContent");

  // Show loading spinner
  loadingSpinner.style.display = "block";
  resultsContent.innerHTML = "";

  try {
    // Send request to Flask backend
    const response = await fetch("/analyze", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ query: input }),
    });

    const result = await response.json();

    // Hide loading spinner
    loadingSpinner.style.display = "none";

    if (result.success) {
      displayResults(result.data);
    } else {
      displayError(
        result.error || "An error occurred while processing your request"
      );
    }
  } catch (error) {
    loadingSpinner.style.display = "none";
    displayError("Network error: Unable to connect to the server");
  }
}

// Display results from Flask backend
function displayResults(data) {
  const resultsContent = document.getElementById("resultsContent");
  let resultsHTML = "";

  if (data.agent_content) {
    // Display the actual AI agent response
    resultsHTML = generateAgentResponseHTML(data);
  } else {
    // Fallback to structured data if available
    if (data.type === "comparison") {
      resultsHTML = generateComparisonHTML(data);
    } else if (data.type === "single") {
      resultsHTML = generateSingleStockHTML(data);
    } else if (data.type === "general") {
      resultsHTML = generateGeneralHTML(data);
    }
  }

  resultsContent.innerHTML = resultsHTML;
  resultsContent.classList.add("fade-in");
}

// Generate HTML for actual AI agent response
function generateAgentResponseHTML(data) {
  const { agent_content, query, type, stock1, stock2, symbol } = data;

  let title = "";
  let icon = "";

  if (type === "comparison") {
    title = `AI Analysis: ${stock1} vs ${stock2}`;
    icon = "fas fa-balance-scale";
  } else if (type === "single") {
    title = `AI Analysis: ${symbol}`;
    icon = "fas fa-chart-line";
  } else {
    title = "AI Market Analysis";
    icon = "fas fa-brain";
  }

  return `
        <div class="agent-response">
            <h4><i class="${icon}"></i> ${title}</h4>
            <div class="query-info">
                <p><strong>Your Query:</strong> "${query}"</p>
            </div>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-robot"></i> AI Agent Team Response</h4>
            <div class="agent-content">
                ${formatAgentContent(agent_content)}
            </div>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-info-circle"></i> Analysis Summary</h4>
            <p>This comprehensive analysis was generated by our multi-agent AI system combining:</p>
            <ul>
                <li><strong>Web Agent:</strong> Real-time news and market sentiment analysis</li>
                <li><strong>Finance Agent:</strong> Current financial data and metrics from YFinance</li>
                <li><strong>AI Coordinator:</strong> Unified analysis and investment recommendations</li>
            </ul>
            <p><em>All data is sourced in real-time and includes the latest available information.</em></p>
        </div>
    `;
}

// Format the agent content to make it more readable
function formatAgentContent(content) {
  if (!content) return "<p>No content available</p>";

  // Convert markdown-style content to HTML
  let formattedContent = content
    // Convert headers
    .replace(/^### (.*$)/gim, "<h5>$1</h5>")
    .replace(/^## (.*$)/gim, "<h4>$1</h4>")
    .replace(/^# (.*$)/gim, "<h3>$1</h3>")
    // Convert bold text
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
    // Convert bullet points
    .replace(/^\* (.*$)/gim, "<li>$1</li>")
    .replace(/^- (.*$)/gim, "<li>$1</li>")
    // Convert line breaks
    .replace(/\n\n/g, "</p><p>")
    .replace(/\n/g, "<br>");

  // Wrap content in paragraphs if not already structured
  if (!formattedContent.includes("<p>") && !formattedContent.includes("<h")) {
    formattedContent = "<p>" + formattedContent + "</p>";
  }

  // Wrap standalone list items in ul tags
  formattedContent = formattedContent.replace(
    /(<li>.*?<\/li>)/gs,
    function (match) {
      if (!match.includes("<ul>")) {
        return "<ul>" + match + "</ul>";
      }
      return match;
    }
  );

  return formattedContent;
}

// Display error message
function displayError(message) {
  const resultsContent = document.getElementById("resultsContent");
  resultsContent.innerHTML = `
        <div class="error-message">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Error</h3>
            <p>${message}</p>
        </div>
    `;
}

// Generate comparison report HTML
function generateComparisonHTML(data) {
  const { stock1, stock2, financial_data, news, market_sentiment, summary } =
    data;

  return `
        <div class="agent-response">
            <h4><i class="fas fa-chart-bar"></i> Finance Agent Analysis</h4>
            <h5>Comparative Financial Data: ${stock1} vs ${stock2}</h5>
            <table class="response-table">
                <thead>
                    <tr>
                        <th>Metric</th>
                        <th>${stock1}</th>
                        <th>${stock2}</th>
                        <th>Winner</th>
                    </tr>
                </thead>
                <tbody>
                    ${financial_data.metrics
                      .map(
                        (metric) => `
                        <tr>
                            <td>${metric.metric}</td>
                            <td>${metric.stock1_value}</td>
                            <td>${metric.stock2_value}</td>
                            <td>${metric.winner}</td>
                        </tr>
                    `
                      )
                      .join("")}
                </tbody>
            </table>
            
            <h5>Analyst Recommendations</h5>
            <p><strong>${stock1}:</strong> ${
    financial_data.recommendations[stock1].rating
  } - ${financial_data.recommendations[stock1].note}</p>
            <p><strong>${stock2}:</strong> ${
    financial_data.recommendations[stock2].rating
  } - ${financial_data.recommendations[stock2].note}</p>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-globe"></i> Web Agent Research</h4>
            <h5>Recent News & Market Sentiment</h5>
            
            <h6>${stock1} News:</h6>
            <ul>
                ${news[stock1]
                  .map(
                    (item) =>
                      `<li>${item.headline} <em>[Source: ${item.source}]</em></li>`
                  )
                  .join("")}
            </ul>
            
            <h6>${stock2} News:</h6>
            <ul>
                ${news[stock2]
                  .map(
                    (item) =>
                      `<li>${item.headline} <em>[Source: ${item.source}]</em></li>`
                  )
                  .join("")}
            </ul>
            
            <p><strong>Market Sentiment:</strong> ${market_sentiment}</p>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-brain"></i> AI Coordinator Summary</h4>
            <h5>Investment Recommendation</h5>
            <p>Based on the comprehensive analysis from both financial data and market research:</p>
            <ul>
                <li><strong>Financial Performance:</strong> ${
                  summary.financial_performance
                }</li>
                <li><strong>Market Position:</strong> ${
                  summary.market_position
                }</li>
                <li><strong>Growth Potential:</strong> ${
                  summary.growth_potential
                }</li>
                <li><strong>Risk Assessment:</strong> ${
                  summary.risk_assessment
                }</li>
            </ul>
            <p><strong>Recommendation:</strong> ${summary.recommendation}</p>
        </div>
    `;
}

// Generate single stock report HTML
function generateSingleStockHTML(data) {
  const {
    symbol,
    financial_data,
    news,
    market_sentiment,
    social_sentiment,
    analysis,
  } = data;

  return `
        <div class="agent-response">
            <h4><i class="fas fa-chart-bar"></i> Finance Agent Analysis</h4>
            <h5>${symbol} Financial Overview</h5>
            <table class="response-table">
                <tbody>
                    <tr>
                        <td><strong>Current Price</strong></td>
                        <td>${financial_data.current_price}</td>
                    </tr>
                    <tr>
                        <td><strong>Market Capitalization</strong></td>
                        <td>${financial_data.market_cap}</td>
                    </tr>
                    <tr>
                        <td><strong>P/E Ratio</strong></td>
                        <td>${financial_data.pe_ratio}</td>
                    </tr>
                    <tr>
                        <td><strong>52-Week Range</strong></td>
                        <td>${financial_data.price_range}</td>
                    </tr>
                    <tr>
                        <td><strong>YTD Performance</strong></td>
                        <td>${financial_data.ytd_performance}</td>
                    </tr>
                </tbody>
            </table>
            
            <h5>Analyst Recommendations</h5>
            <p><strong>Consensus:</strong> ${
              financial_data.recommendation.consensus
            }</p>
            <p>${financial_data.recommendation.note}</p>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-globe"></i> Web Agent Research</h4>
            <h5>Latest News & Market Sentiment</h5>
            <ul>
                ${news
                  .map(
                    (item) =>
                      `<li>${item.headline} <em>[Source: ${item.source}]</em></li>`
                  )
                  .join("")}
            </ul>
            <p><strong>Market Sentiment:</strong> ${market_sentiment}</p>
            <p><strong>Social Media Buzz:</strong> ${social_sentiment}</p>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-brain"></i> AI Coordinator Summary</h4>
            <h5>Investment Analysis for ${symbol}</h5>
            <p><strong>Strengths:</strong></p>
            <ul>
                ${analysis.strengths
                  .map((strength) => `<li>${strength}</li>`)
                  .join("")}
            </ul>
            <p><strong>Risks:</strong></p>
            <ul>
                ${analysis.risks.map((risk) => `<li>${risk}</li>`).join("")}
            </ul>
            <p><strong>Overall Assessment:</strong> ${analysis.assessment}</p>
        </div>
    `;
}

// Generate general report HTML
function generateGeneralHTML(data) {
  const { query, market_overview, market_metrics, recommendations } = data;

  return `
        <div class="agent-response">
            <h4><i class="fas fa-search"></i> Query Analysis</h4>
            <p>Your query: <strong>"${query}"</strong></p>
            <p>Our AI agents have processed your request and provided relevant financial insights.</p>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-globe"></i> Web Agent Research</h4>
            <h5>Market Overview & Current Trends</h5>
            <ul>
                ${market_overview.map((item) => `<li>${item}</li>`).join("")}
            </ul>
            <p><em>Sources: Bloomberg, Reuters, Financial Times, CNBC</em></p>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-chart-line"></i> Finance Agent Insights</h4>
            <h5>Key Market Metrics</h5>
            <table class="response-table">
                <tbody>
                    ${market_metrics
                      .map(
                        (metric) => `
                        <tr>
                            <td><strong>${metric.index}</strong></td>
                            <td>${metric.value}</td>
                            <td class="positive">${metric.change}</td>
                        </tr>
                    `
                      )
                      .join("")}
                </tbody>
            </table>
        </div>
        
        <div class="agent-response">
            <h4><i class="fas fa-brain"></i> AI Coordinator Recommendations</h4>
            <p>Based on current market conditions and your query, consider:</p>
            <ul>
                ${recommendations.map((rec) => `<li>${rec}</li>`).join("")}
            </ul>
        </div>
    `;
}

// Intersection Observer for animations
const observerOptions = {
  threshold: 0.1,
  rootMargin: "0px 0px -50px 0px",
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      entry.target.classList.add("fade-in");
    }
  });
}, observerOptions);

// Observe elements for animation
document.addEventListener("DOMContentLoaded", () => {
  const animatedElements = document.querySelectorAll(
    ".feature-card, .agent-card, .workflow-step"
  );
  animatedElements.forEach((el) => observer.observe(el));
});

// Handle Enter key in input field
document.addEventListener("DOMContentLoaded", () => {
  const stockInput = document.getElementById("stockInput");
  if (stockInput) {
    stockInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        analyzeStock();
      }
    });
  }
});
